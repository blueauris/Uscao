From: <ÓÉ Microsoft Internet Explorer 5 ±£´æ>
Subject: Search Techniques
Date: Sun, 5 Oct 2008 15:44:06 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01C92701.332E6960"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3350

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C92701.332E6960
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://ace.delos.com/usacotext2?a=hRNIj1mxHTk&S=rec

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Search Techniques</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.2900.3395" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#f0f0f0><FONT=20
face=3D"Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
<DIV=20
style=3D"BORDER-RIGHT: 1px solid; PADDING-RIGHT: 1em; BORDER-TOP: 1px =
solid; PADDING-LEFT: 1em; PADDING-BOTTOM: 1em; BORDER-LEFT: 1px solid; =
WIDTH: 45em; PADDING-TOP: 1em; BORDER-BOTTOM: 1px solid; =
BACKGROUND-COLOR: white">
<TABLE cellSpacing=3D8>
  <TBODY>
  <TR>
    <TD><IMG src=3D"http://ace.delos.com/usaco/cowhead2.gif"></TD>
    <TD>&nbsp;&nbsp;&nbsp;</TD>
    <TD><B><FONT size=3D5><FONT=20
      face=3D"Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill =
Sans">Search=20
      Techniques </FONT></B></FONT></TD></TR></TBODY></TABLE>
<H4>Sample Problem: <I>n</I> Queens [Traditional]</H4>
<P>Place <I>n</I> queens on an <I>n x n</I> chess board so that no queen =
is=20
attacked by another queen.=20
<H4>Depth First Search (DFS) </H4>
<P>The most obvious solution to code is to add queens recursively to the =
board=20
one by one, trying all possible queen placements. It is easy to exploit =
the fact=20
that there must be exactly one queen in each column: at each step in the =

recursion, just choose where in the current column to put the queen.=20
<BR><TT><FONT=20
size=3D2><BR>&nbsp;1&nbsp;search(col)<BR>&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;if&nbsp;filled&nbsp;all&nbsp;columns<BR>&nbsp;3&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;solution&nbsp;and&nbsp;exit&n=
bsp;<BR><BR>&nbsp;4&nbsp;&nbsp;&nbsp;for&nbsp;each&nbsp;row<BR>&nbsp;5&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;board(row,&nbsp;col)&nbsp;=
is&nbsp;not&nbsp;attacked<BR>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;place&nbsp;queen&nbsp;at&nbsp;(row,&nb=
sp;col)<BR>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;search(col+1)<BR>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove&nbsp;queen&nbsp;at&nbsp;(r=
ow,&nbsp;col)<BR></FONT></TT>
<P>Calling <TT><FONT size=3D2>search(0)</FONT></TT> begins the search. =
This runs=20
quickly, since there are relatively few choices at each step: once a few =
queens=20
are on the board, the number of non-attacked squares goes down =
dramatically.=20
<P>This is an example of <I>depth first search</I>, because the =
algorithm=20
iterates down to the bottom of the search tree as quickly as possible: =
once=20
<I>k</I> queens are placed on the board, boards with even more queens =
are=20
examined before examining other possible boards with only <I>k</I> =
queens. This=20
is okay but sometimes it is desirable to find the simplest solutions =
before=20
trying more complex ones.=20
<P>Depth first search checks each node in a search tree for some =
property. The=20
search tree might look like this: <BR><IMG=20
src=3D"http://ace.delos.com/usaco/TEXT/rec.tree1.gif"><BR>The algorithm =
searches=20
the tree by going down as far as possible and then backtracking when =
necessary,=20
making a sort of outline of the tree as the nodes are visited. =
Pictorially, the=20
tree is traversed in the following manner: <BR><IMG=20
src=3D"http://ace.delos.com/usaco/TEXT/rec2.gif"><BR>
<H5>Complexity</H5>
<P>Suppose there are <I>d</I> decisions that must be made. (In this case =

<I>d=3Dn</I>, the number of columns we must fill.) Suppose further that =
there are=20
C choices for each decision. (In this case <I>c=3Dn</I> also, since any =
of the=20
rows could potentially be chosen.) Then the entire search will take time =

proportional to <I>c<SUP>d</SUP></I>, i.e., an exponential amount of =
time. This=20
scheme requires little space, though: since it only keeps track of as =
many=20
decisions as there are to make, it requires only O(<I>d</I>) space.=20
<H4>Sample Problem: Knight Cover [Traditional]</H4>
<P>Place as few knights as possible on an <I>n x n</I> chess board so =
that every=20
square is attacked. A knight is not considered to attack the square on =
which it=20
sits.=20
<H5>Breadth First Search (BFS)</H5>
<P>In this case, it is desirable to try all the solutions with only =
<I>k</I>=20
knights before moving on to those with <I>k+1</I> knights. This is =
called=20
<B>breadth first search</B>. The usual way to implement breadth first =
search is=20
to use a queue of states: <BR><TT><FONT=20
size=3D2><BR>&nbsp;1&nbsp;process(state)<BR>&nbsp;2&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;for&nbsp;each&nbsp;possible&nbsp;next&nbsp;state&nbsp;from&nbsp;t=
his&nbsp;one<BR>&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;enqueue&nbsp;next&nbsp;state&nbsp;<BR><BR>&nbsp;4&nbsp;search()<BR>&n=
bsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueue&nbsp;initial&nbsp;state<BR>&nb=
sp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;!empty(queue)<BR>&nbsp;7&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=3D&nbsp;get=
&nbsp;state&nbsp;from&nbsp;queue<BR>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;process(state)<BR></FONT></TT>
<P>This is called breadth first search because it searches an entire row =
(the=20
breadth) of the search tree before moving on to the next row. For the =
search=20
tree used previously, breadth first search visits the nodes in this =
order:=20
<BR><IMG src=3D"http://ace.delos.com/usaco/TEXT/rec3.gif"><BR>It first =
visits the=20
top node, then all the nodes at level 1, then all at level 2, and so on. =

<H5>Complexity</H5>
<P>Whereas depth first search required space proportional to the number =
of=20
decisions (there were <I>n</I> columns to fill in the <I>n</I> queens =
problem,=20
so it took O(<I>n</I>) space), breadth first search requires space =
exponential=20
in the number of choices.=20
<P>If there are <I>c</I> choices at each decision and <I>k</I> decisions =
have=20
been made, then there are <I>c <SUP>k</SUP></I> possible boards that =
will be in=20
the queue for the next round. This difference is quite significant given =
the=20
space restrictions of some programming environments.=20
<P>[Some details on why <I>c<SUP>k</SUP>: Consider the nodes in the =
recursion=20
tree. The zeroeth level has 1 nodes. The first level has c nodes. The =
second=20
level has c<SUP>2</SUP> nodes, etc. Thus, the total number of nodes on =
the k-th=20
level is c<SUP>k</SUP></I>.]=20
<H5>Depth First with Iterative Deepening (ID)</H5>
<P>An alternative to breadth first search is <I>iterative deepening</I>. =
Instead=20
of a single breadth first search, run D depth first searches in =
succession, each=20
search allowed to go one row deeper than the previous one. That is, the =
first=20
search is allowed only to explore to row 1, the second to row 2, and so =
on. This=20
``simulates'' a breadth first search at a cost in time but a savings in =
space.=20
<BR><TT><FONT=20
size=3D2><BR>&nbsp;1&nbsp;truncated_dfsearch(hnextpos,&nbsp;depth)<BR>&nb=
sp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;board&nbsp;is&nbsp;covered<BR>&=
nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;so=
lution&nbsp;and&nbsp;exit&nbsp;<BR><BR>&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;if&nbsp;depth&nbsp;=3D=3D&nbsp;0<BR>&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;<BR><BR>&nbsp;6&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;for&nbsp;i&nbsp;from&nbsp;nextpos&nbsp;to&nbsp;n*n<BR>&nbsp;7&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;put&nbsp;knight&nbsp=
;at&nbsp;i<BR>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;truncated_dfsearch(i+1,&nbsp;depth-1)<BR>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove&nbsp;knight&nbsp;at&nbsp;i&nbsp;<BR=
><BR>10&nbsp;dfid_search<BR>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;dept=
h&nbsp;=3D&nbsp;0&nbsp;to&nbsp;max_depth<BR>12&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;truncated_dfsearch(0,&nbsp;depth)<BR></FONT></TT>
<H5>Complexity</H5>
<P>The space complexity of iterative deepening is just the space =
complexity of=20
depth first search: O(<I>n</I>). The time complexity, on the other hand, =
is more=20
complex. Each truncated depth first search stopped at depth <I>k</I> =
takes=20
<I>c<SUP>k</SUP></I> time. Then if <I>d</I> is the maximum number of =
decisions,=20
depth first iterative deepening takes <I>c<SUP>0</SUP> + c<SUP>1</SUP> + =

c<SUP>2</SUP> + ... + c<SUP>d</SUP></I> time.=20
<P>If <I>c =3D 2</I>, then this sum is <I>c<SUP>d+1</SUP> - 1</I>, about =
twice the=20
time that breadth first search would have taken. When <I>c</I> is more =
than two=20
(i.e., when there are many choices for each decision), the sum is even =
less:=20
iterative deepening cannot take more than twice the time that breadth =
first=20
search would have taken, assuming there are always at least two choices =
for each=20
decision.=20
<H4>Which to Use?</H4>
<P>Once you've identified a problem as a search problem, it's important =
to=20
choose the right type of search. Here are some things to think about.=20
<H5>In a Nutshell </H5>
<CENTER>
<TABLE>
  <TBODY>
  <TR>
    <TD>Search</TD>
    <TD>Time</TD>
    <TD>Space</TD>
    <TD>When to use</TD></TR>
  <TR>
    <TD>DFS</TD>
    <TD>O(<I>c <SUP>k</SUP></I>)</TD>
    <TD>O(<I>k</I>)</TD>
    <TD>Must search tree anyway, know the level the answers are on, or =
you=20
      aren't looking for the shallowest number.</TD></TR>
  <TR>
    <TD>BFS</TD>
    <TD>O(<I>c <SUP>d </SUP></I>)</TD>
    <TD>O(<I>c <SUP>d </SUP></I>)</TD>
    <TD>Know answers are very near top of tree, or want shallowest=20
  answer.</TD></TR>
  <TR>
    <TD>DFS+ID</TD>
    <TD>O(<I>c <SUP>d</SUP></I>)</TD>
    <TD>O(<I>d</I>)</TD>
    <TD>Want to do BFS, don't have enough space, and can spare the=20
  time.</TD></TR></TBODY></TABLE></CENTER><I>d</I> is the depth of the =
answer=20
<BR><I>k</I> is the depth searched <BR><I>d &lt;=3D k</I>=20
<P>Remember the ordering properties of each search. If the program needs =
to=20
produce a list sorted shortest solution first (in terms of distance from =
the=20
root node), use breadth first search or iterative deepening. For other =
orders,=20
depth first search is the right strategy.=20
<P>If there isn't enough time to search the entire tree, use the =
algorithm that=20
is more likely to find the answer. If the answer is expected to be in =
one of the=20
rows of nodes closest to the root, use breadth first search or iterative =

deepening. Conversely, if the answer is expected to be in the leaves, =
use the=20
simpler depth first search.=20
<P>Be sure to keep space constraints in mind. If memory is insufficient =
to=20
maintain the queue for breadth first search but time is available, use =
iterative=20
deepening.=20
<H4>Sample Problems</H4>
<H5>Superprime Rib [USACO 1994 Final Round, adapted]</H5>
<P>A number is called superprime if it is prime and every number =
obtained by=20
chopping some number of digits from the right side of the decimal =
expansion is=20
prime. For example, 233 is a superprime, because 233, 23, and 2 are all =
prime.=20
Print a list of all the superprime numbers of length <I>n</I>, for <I>n =
&lt;=3D=20
9</I>. The number 1 is not a prime.=20
<P>For this problem, use depth first search, since all the answers are =
going to=20
be at the <I>n</I>th level (the bottom level) of the search.=20
<H5>Betsy's Tour [USACO 1995 Qualifying Round]</H5>
<P>A square township has been partitioned into <I>n <SUP>2</SUP></I> =
square=20
plots. The Farm is located in the upper left plot and the Market is =
located in=20
the lower left plot. Betsy takes a tour of the township going from Farm =
to=20
Market by walking through every plot exactly once. Write a program that =
will=20
count how many unique tours Betsy can take in going from Farm to Market =
for any=20
value of <I>n &lt;=3D 6</I>.=20
<P>Since the number of solutions is required, the entire tree must be =
searched,=20
even if one solution is found quickly. So it doesn't matter from a time=20
perspective whether DFS or BFS is used. Since DFS takes less space, it =
is the=20
search of choice for this problem.=20
<H5>Udder Travel [USACO 1995 Final Round; Piele]</H5>
<P>The Udder Travel cow transport company is based at farm A and owns =
one cow=20
truck which it uses to pick up and deliver cows between seven farms A, =
B, C, D,=20
E, F, and G. The (commutative) distances between farms are given by an =
array.=20
Every morning, Udder Travel has to decide, given a set of cow moving =
orders, the=20
order in which to pick up and deliver cows to minimize the total =
distance=20
traveled. Here are the rules:=20
<UL>
  <LI>The truck always starts from the headquarters at farm A and must =
return=20
  there when the day's deliveries are done.=20
  <LI>The truck can only carry one cow at a time.=20
  <LI>The orders are given as pairs of letters denoting where a cow is =
to be=20
  picked up followed by where the cow is to be delivered. </LI></UL>
<P>Your job is to write a program that, given any set of orders, =
determines the=20
shortest route that takes care of all the deliveries, while starting and =
ending=20
at farm A.=20
<P>Since all possibilities must be tried in order to ensure the best one =
is=20
found, the entire tree must be searched, which takes the same amount of =
time=20
whether using DFS or BFS. Since DFS uses much less space and is =
conceptually=20
easier to implement, use that.=20
<H5>Desert Crossing [1992 IOI, adapted]</H5>
<P>A group of desert nomads is working together to try to get one of =
their group=20
across the desert. Each nomad can carry a certain number of quarts of =
water, and=20
each nomad drinks a certain amount of water per day, but the nomads can =
carry=20
differing amounts of water, and require different amounts of water. =
Given the=20
carrying capacity and drinking requirements of each nomad, find the =
minimum=20
number of nomads required to get at least one nomad across the desert.=20
<P>All the nomads must survive, so every nomad that starts out must =
either turn=20
back at some point, carrying enough water to get back to the start or =
must reach=20
the other side of the desert. However, if a nomad has surplus water when =
it is=20
time to turn back, the water can be given to their friends, if their =
friends can=20
carry it.=20
<P>Analysis: This problem actually is two recursive problems: one =
recursing on=20
the set of nomads to use, the other on when the nomads turn back. =
Depth-first=20
search with iterative deepening works well here to determine the nomads=20
required, trying first if any one can make it across by themselves, then =
seeing=20
if two work together to get across, etc.=20
<H5>Addition Chains</H5>
<P>An addition chain is a sequence of integers such that the first =
number is 1,=20
and every subsequent number is the sum of some two (not necessarily =
unique)=20
numbers that appear in the list before it. For example, 1 2 3 5 is such =
a chain,=20
as 2 is 1+1, 3 is 2+1, and 5 is 2+3. Find the minimum length chain that =
ends=20
with a given number.=20
<P>Analysis: Depth-first search with iterative deepening works well =
here, as DFS=20
has a tendency to first try 1 2 3 4 5 ... n, which is really bad and the =
queue=20
grows too large very quickly for BFS. </P></DIV><BR>
<CENTER><A href=3D"http://ace.delos.com/usacogate?a=3DhRNIj1mxHTk">USACO =
Gateway</A>=20
| <A href=3D"mailto:kolstad@ace.delos.com">Comment or Question</A>=20
</CENTER></FONT></BODY></HTML>

------=_NextPart_000_0000_01C92701.332E6960
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://ace.delos.com/usaco/cowhead2.gif

R0lGODlhQQBRAPYAAP///wgICBAQEBgYGM7Ozvfv7//39/8AALWEa4RSAP/3nP/vABAQGAgIEL21
xjkxQtbO3s7G1rWtvTEpOSkhMca9zkI5SiEYKVpKY2NSa1JCWko5UoxzlHNae2tSc5x7pbWUva2M
taWErb2UxpRznPfO/9at3saczt6t57WMvffG/9al3v/3/87GztbO1t7W3ufe5721va2lrbWttca9
xpSMlJyUnKWcpf/v/9bG1r2tvc69zrWltf/n///e/zkxOTEpMf/W/1pKWoRrhK2MrSkhKVJCUntj
e//O/86lzvfG96WEpZx7nHNac72Uvee155RzlLWMtUo5SmtSa4xrjK2ErYRjhGNKY0IxQqV7pVpC
WntaeyEYITkpOVI5UjEhMRgQGCkYKRAIEAgACPe97wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5
BAEAAAcALAAAAABBAFEAAAf+gAeCg4SFhoeIiYJlio2Oj5AHZZOTkZaXiJRlCQmbnZigkZqdm56k
oZiaqpScrZ2cpqWol5Otpq62sLaejLOirre4pby3vb6PsbjAr7rCx5DByrmkypXPjbXM0snb147R
1dPd3orgy9LO5Inm6O2f6ofs2u6w8Jnt8sLG9oPs+cD7+C1C9w+WLIH9CNKbFpBfMV4L5zWEp4mA
RQKq8KXztqrMxY8gMWajN5EWpQUoUy6oGBLkv5LQyqicSXNSy48jx6WSmXISSp4ra3q8iZGkyZ4/
eQJVOtPmTXkw4zVN+hNp0JVLifoTVbXrVaVMv/58ai5qIbBUv8r0Kfbqyqf++KBZbeuz7tqwa1vm
BCbXK967dP3q1Wftm8qwNBN3XTvW5bl3hucmXlVz8VCcBJEpTjoJgOfPnk9azeuYVKy+PSmBLgO6
NQC2gnEW1oQa6+pJCjp/1hTaK1aXvu5i3K2guHHWuI8jB9oT+CxKFlm/Pm48d/Xq0plzpnTsMnLl
Za7nTp5799TDMQv30wQ+/HVK2M1vXolNeuiJ8MeTL67KeGvtWPWUiX3/dfRaeOxhlyCByKUW3U/x
7BYAGGE0oNt/uyXYHoKudTTUWoboFoQKJJJ4m2oF9reKayweSNtZAJQoIxC8oZihjCXy1mKHLKoX
AI4qBFEGjjpSAqSMF+7+6CKSDC4So4xIDHmkCkZOieOBSt43CZH3CQIGjl9aKeaRy2V5IJVAIrcI
Fk++RqKUY74J55VYtrjllkeGtogmcaYpJoFKloEFmmm+FqKcc06pCplmgmalmmdRWeWjqxTaqKOF
NjTkopRyimSWOn7GJQCHSpqoopN+uluH2QH6JKSEnNrnn6v1uCKrpc7aJ4Ydhqgbd7nqSuuqPaIi
q7B01tnrc8g+et+OZn3T7JTK4trdtES6mqGhz+DZbJIF7kZOqmOCy+uB6ix3LKKB2gcsRyfCaaOd
gL57jbYuNgrui+Oae6m2/FLkL722qifQvD1Cay9CkiCsisLRClxkqCc9MhwhqwivZrGvGGcs7sax
FpzkhRGnKzKD7oIMI8bx6qlyP/p6+DLMoKoy81n4LnxziCnuDI2WPotisDqBAAA7

------=_NextPart_000_0000_01C92701.332E6960
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://ace.delos.com/usaco/TEXT/rec.tree1.gif

R0lGODdhdwHSAIAAAAAAAP///ywAAAAAdwHSAAAC/oyPqcvtD6OctNqLs968+w+G4kiW5omm6sq2
7gvH8kzX9o3n+s73/g8MCofEovGITCqXzKbzCY1Kp9Sq9YrNarfcrvcLDovH5LL5jE6r1+y2+80F
yOH0+mtuwNv3/BBg8dcnOHgRCEiImNhgyMCo+DjoeAhJKSg5WZlJd6nAqfl55okgCloaRhqAarra
RarKCosl+hpb60Vrmyull6frCyYX/Du8JZyHS5xMxDvKrPxcZPwgDV3dQz3hbL0to12BzR2eAr5B
Ln7eYf7hjd5OwT6i7j6fIH9iTy+OvwKfb90fY58/XQJnFBxY6uANgAg/MfyhsKGlh0MiSnxjcRmy
/otrKDbJyPGUxyggQ2YpSXKjySsji7VcCQWlFpkwK74kc7OmkJyheOrMQRNN0J8uhrLxSZQF0j1G
k4JoynSpUw5QCUmdauFqpqpYO2lN+LVrqrCwyBI1a4trSLW/2OZzqwytO7nc4Fazq48uMbzz9Oby
25AvKMEXCSsyvBIwIsQ/g6lcpUfxWUOSMWIS+/TyME+PMTdalMyV53TTNkPoPLpX6bYRUI9W5dpq
69QZYLM+TRuDbV+oYnvuvXd17kLCeTvw/fr4OeTDO0Fjxpw29G2Oow+vXpdR5Zrb63Cyjhk8pVnN
defFXT6b+Ee0ur9dnjW98nA31xe2n8g1/oH7/hen6z/XeeuU5x4c4gFYF3wkIHiXgCUUmBaDfDAo
oXH6tFBhWg4qNdmFAWWYkIIGJbbhiPd5iAOI7IkIlIqy0eeiBDFGhSJEAdYIxIyWwWgEhEfpeJQS
QIbCIhJD4lRiEkcCs6RQKd1GHxVNnpRkTLX42MaU8ZRVpBVYelklSw5pWQaZ42zVZSvjhdmKmTu5
KQacRb0YpRpy7nDnF1/ykKcNe6bBmE19whBolpQNys+hHSn6nGZIOuckpKGBZgZnRH4W3HxjiPYo
pRZqegp6cYpK0GyjkqqnqaWieouqwLiqIatqyhoHrFfSWmtxr+r6F6+pghoqsL16uqmwu2Ja/ueO
yobmCKLjNGsntP84ZmihEFFLnbNFaUtoggb28WenbnBbA7lWYmRuuXuleyZ77B7xLgrxLjTsuPOm
eOuymoQ7Bb94cjmYgffauO+3fw1s4rimHYawHw0vk5/BcT0sr8SNTohusgLrm63FQd74saHvdcTx
XBQXcjJpEqWcTcYcsYxrpTD5y0/JL98Cc205zzqTzTPDvLN5YqUcdFZFn7rL0e/kRrMGSi/d3LxP
yzi1zExUHXNqTbeGta/padv1cWHbGY3C8om9k9lne73Q2IC47TG+Wa79zZRwS0o31H6KnDdxhOJx
9wHW/ixhZIGPJfjh3jF6j6PF4t23r/tZfmq145HXQ6wfbOea+eWjbF5b1lSCnjdwIuwWLOlroz6g
6GK6fjbrHsjeKuzy0U6V7VWY7jnmqvvd+a/B987p6cYKbznxxzced++2ni6tUNE738j092C76OBr
YU99995/D3744o9Pfvnmn49++uqvz3777r8Pf/zyz09//UUUAAA7

------=_NextPart_000_0000_01C92701.332E6960
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://ace.delos.com/usaco/TEXT/rec2.gif

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

------=_NextPart_000_0000_01C92701.332E6960
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://ace.delos.com/usaco/TEXT/rec3.gif

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

------=_NextPart_000_0000_01C92701.332E6960--
